<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="base.mapper.SubscribelogMapper" >
  <resultMap id="BaseResultMap" type="base.model.Subscribelog" >
    <id column="courseid" property="courseid" jdbcType="INTEGER" />
    <id column="traineeid" property="traineeid" jdbcType="INTEGER" />
    <id column="time" property="time" jdbcType="TIMESTAMP" />
    <result column="deduction" property="deduction" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    courseid, traineeid, time, deduction
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="base.model.SubscribelogExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from subscribelog
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="base.model.SubscribelogKey" >
    select 
    <include refid="Base_Column_List" />
    from subscribelog
    where courseid = #{courseid,jdbcType=INTEGER}
      and traineeid = #{traineeid,jdbcType=INTEGER}
      and time = #{time,jdbcType=TIMESTAMP}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="base.model.SubscribelogKey" >
    delete from subscribelog
    where courseid = #{courseid,jdbcType=INTEGER}
      and traineeid = #{traineeid,jdbcType=INTEGER}
      and time = #{time,jdbcType=TIMESTAMP}
  </delete>
  <delete id="deleteByExample" parameterType="base.model.SubscribelogExample" >
    delete from subscribelog
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="base.model.Subscribelog" >
    insert into subscribelog (courseid, traineeid, time, 
      deduction)
    values (#{courseid,jdbcType=INTEGER}, #{traineeid,jdbcType=INTEGER}, #{time,jdbcType=TIMESTAMP}, 
      #{deduction,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="base.model.Subscribelog" >
    insert into subscribelog
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="courseid != null" >
        courseid,
      </if>
      <if test="traineeid != null" >
        traineeid,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="deduction != null" >
        deduction,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="courseid != null" >
        #{courseid,jdbcType=INTEGER},
      </if>
      <if test="traineeid != null" >
        #{traineeid,jdbcType=INTEGER},
      </if>
      <if test="time != null" >
        #{time,jdbcType=TIMESTAMP},
      </if>
      <if test="deduction != null" >
        #{deduction,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="base.model.SubscribelogExample" resultType="java.lang.Integer" >
    select count(*) from subscribelog
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update subscribelog
    <set >
      <if test="record.courseid != null" >
        courseid = #{record.courseid,jdbcType=INTEGER},
      </if>
      <if test="record.traineeid != null" >
        traineeid = #{record.traineeid,jdbcType=INTEGER},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deduction != null" >
        deduction = #{record.deduction,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update subscribelog
    set courseid = #{record.courseid,jdbcType=INTEGER},
      traineeid = #{record.traineeid,jdbcType=INTEGER},
      time = #{record.time,jdbcType=TIMESTAMP},
      deduction = #{record.deduction,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="base.model.Subscribelog" >
    update subscribelog
    <set >
      <if test="deduction != null" >
        deduction = #{deduction,jdbcType=INTEGER},
      </if>
    </set>
    where courseid = #{courseid,jdbcType=INTEGER}
      and traineeid = #{traineeid,jdbcType=INTEGER}
      and time = #{time,jdbcType=TIMESTAMP}
  </update>
  <update id="updateByPrimaryKey" parameterType="base.model.Subscribelog" >
    update subscribelog
    set deduction = #{deduction,jdbcType=INTEGER}
    where courseid = #{courseid,jdbcType=INTEGER}
      and traineeid = #{traineeid,jdbcType=INTEGER}
      and time = #{time,jdbcType=TIMESTAMP}
  </update>
</mapper>